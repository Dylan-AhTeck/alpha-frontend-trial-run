// Thread Component - Main chat interface component
import {
  ActionBarPrimitive,
  BranchPickerPrimitive,
  ComposerPrimitive,
  ErrorPrimitive,
  MessagePrimitive,
  ThreadPrimitive,
  useThread,
} from "@assistant-ui/react";
import type { FC } from "react";
import { useEffect, useRef } from "react";
import {
  ArrowDownIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  CopyIcon,
  PencilIcon,
  RefreshCwIcon,
  SendHorizontalIcon,
} from "lucide-react";
import { cn } from "@/shared/utils/utils";

import { Button } from "@/shared/components/ui/button";
import { TooltipIconButton } from "./TooltipIconButton";
import { MarkdownText } from "./MarkdownText";

export default function Thread() {
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  });

  return (
    <ThreadPrimitive.Root
      className="bg-background box-border flex h-full flex-col"
      style={{
        ["--thread-max-width" as string]: "42rem",
      }}
    >
      {/* Thread Title Header */}
      <ThreadTitle />

      {/* Scrollable Messages Area */}
      <ThreadPrimitive.Viewport className="flex-1 flex flex-col items-center overflow-y-auto scroll-smooth bg-inherit px-4 pt-8">
        <ThreadWelcome />

        <ThreadPrimitive.Messages
          components={{
            UserMessage: UserMessage,
            EditComposer: EditComposer,
            AssistantMessage: AssistantMessage,
          }}
        />

        {/* Auto-scroll anchor */}
        <div ref={messagesEndRef} />

        <ThreadPrimitive.If empty={false}>
          <div className="min-h-8 flex-grow" />
        </ThreadPrimitive.If>
      </ThreadPrimitive.Viewport>

      {/* Fixed Input Area at Bottom */}
      <div className="flex-shrink-0 mt-3 flex w-full flex-col items-center justify-end bg-inherit pb-6 px-4">
        <div className="w-full max-w-[var(--thread-max-width)] relative">
          <ThreadScrollToBottom />
          <Composer />
        </div>
      </div>
    </ThreadPrimitive.Root>
  );
}

const ThreadTitle: FC = () => {
  const messages = useThread((t) => t.messages);
  const threadState = useThread((t) => t); // Get full thread state to explore
  const isEmpty = messages.length === 0;

  // Get the auto-generated title from metadata
  const autoGeneratedTitle = threadState.metadata?.title;
  console.log("[DEBUG] Auto-generated title:", autoGeneratedTitle);

  const getThreadMetadata = () => {
    if (isEmpty) {
      return "Start a live conversation with Dylan";
    }

    const messageCount = messages.length;

    // Get the timestamp from the last message or use current time
    const lastMessage = messages[messages.length - 1];
    const lastMessageTime = lastMessage?.createdAt || new Date();

    // Format relative time
    const formatRelativeTime = (date: Date | string) => {
      const now = new Date();
      const targetDate = new Date(date);
      const diffMs = now.getTime() - targetDate.getTime();
      const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
      const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
      const diffMinutes = Math.floor(diffMs / (1000 * 60));

      if (diffDays > 0) {
        return diffDays === 1 ? "1 day ago" : `${diffDays} days ago`;
      } else if (diffHours > 0) {
        return diffHours === 1 ? "1 hour ago" : `${diffHours} hours ago`;
      } else if (diffMinutes > 0) {
        return diffMinutes === 1
          ? "1 minute ago"
          : `${diffMinutes} minutes ago`;
      } else {
        return "just now";
      }
    };

    const lastUpdated = formatRelativeTime(lastMessageTime);

    return `${messageCount} ${
      messageCount === 1 ? "message" : "messages"
    } â€¢ Last updated ${lastUpdated}`;
  };

  // Use auto-generated title from metadata, with fallback
  const displayTitle = isEmpty
    ? "New Chat with Dylan IdentityX"
    : autoGeneratedTitle || "Chat with Dylan IdentityX";

  return (
    <div className="border-b border-white/10 bg-black/30 backdrop-blur-sm px-6 py-4">
      <div className="flex flex-col">
        <h1 className="text-xl font-semibold text-white">{displayTitle}</h1>
        <p className="text-sm text-white/60 mt-1">{getThreadMetadata()}</p>
      </div>
    </div>
  );
};

const ThreadScrollToBottom: FC = () => {
  return (
    <ThreadPrimitive.ScrollToBottom asChild>
      <TooltipIconButton
        tooltip="Scroll to bottom"
        variant="outline"
        className="absolute -top-12 right-4 rounded-full disabled:invisible"
      >
        <ArrowDownIcon />
      </TooltipIconButton>
    </ThreadPrimitive.ScrollToBottom>
  );
};

const ThreadWelcome: FC = () => {
  return (
    <ThreadPrimitive.Empty>
      <div className="flex w-full max-w-[var(--thread-max-width)] flex-grow flex-col">
        <div className="flex w-full flex-grow flex-col items-center justify-center">
          <p className="mt-4 font-medium">How can I help you today?</p>
        </div>
        <ThreadWelcomeSuggestions />
      </div>
    </ThreadPrimitive.Empty>
  );
};

const ThreadWelcomeSuggestions: FC = () => {
  return (
    <div className="mt-3 flex w-full items-stretch justify-center gap-4">
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="Tell me about your experience living in different countries"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          Tell me about your experience living in different countries
        </span>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="What's your experience with React and modern web development?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          What&apos;s your experience with React and modern web development?
        </span>
      </ThreadPrimitive.Suggestion>
      <ThreadPrimitive.Suggestion
        className="hover:bg-muted/80 flex max-w-sm grow basis-0 flex-col items-center justify-center rounded-lg border p-3 transition-colors ease-in"
        prompt="How's life as a software engineer in New York?"
        method="replace"
        autoSend
      >
        <span className="line-clamp-2 text-ellipsis text-sm font-semibold">
          How&apos;s life as a software engineer in New York?
        </span>
      </ThreadPrimitive.Suggestion>
    </div>
  );
};

const Composer: FC = () => {
  return (
    <ComposerPrimitive.Root className="border border-gray-300 focus-within:border-aui-ring/20 flex w-full flex-wrap items-end rounded-lg bg-inherit px-2.5 shadow-sm transition-colors ease-in">
      <ComposerPrimitive.Input
        autoFocus
        placeholder="Write a message..."
        rows={1}
        className="placeholder:text-muted-foreground max-h-40 flex-grow resize-none border-none bg-transparent px-2 py-4 text-sm outline-none focus:ring-0 disabled:cursor-not-allowed"
      />
      <ComposerAction />
    </ComposerPrimitive.Root>
  );
};

const ComposerAction: FC = () => {
  return (
    <ComposerPrimitive.Send asChild>
      <TooltipIconButton
        tooltip="Send"
        variant="default"
        className="my-2.5 size-8 p-2 transition-opacity ease-in"
      >
        <SendHorizontalIcon />
      </TooltipIconButton>
    </ComposerPrimitive.Send>
  );
};

const UserMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="grid w-full max-w-[var(--thread-max-width)] auto-rows-auto grid-cols-[minmax(72px,1fr)_auto] gap-y-2 py-4">
      <div className="bg-muted text-foreground col-start-2 mr-3 max-w-xl break-words rounded-3xl px-5 py-2.5">
        <MessagePrimitive.Content />
      </div>
      <UserActionBar />
    </MessagePrimitive.Root>
  );
};

const UserActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="col-start-2 mr-3 mt-2.5 flex gap-1"
    >
      <ActionBarPrimitive.Edit asChild>
        <TooltipIconButton tooltip="Edit">
          <PencilIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Edit>
    </ActionBarPrimitive.Root>
  );
};

const EditComposer: FC = () => {
  return (
    <ComposerPrimitive.Root className="bg-muted my-4 flex w-full max-w-[var(--thread-max-width)] flex-col gap-2 rounded-xl">
      <ComposerPrimitive.Input className="text-foreground flex h-8 w-full resize-none border-none bg-transparent p-4 pb-2 outline-none focus:ring-0" />
      <div className="mx-3 mb-3 flex items-center justify-center gap-2 self-end">
        <ComposerPrimitive.Cancel asChild>
          <Button variant="ghost" className="py-1">
            Cancel
          </Button>
        </ComposerPrimitive.Cancel>
        <ComposerPrimitive.Send asChild>
          <Button className="py-1">Send</Button>
        </ComposerPrimitive.Send>
      </div>
    </ComposerPrimitive.Root>
  );
};

const AssistantMessage: FC = () => {
  return (
    <MessagePrimitive.Root className="relative grid w-full max-w-[var(--thread-max-width)] auto-rows-auto grid-cols-[auto_1fr] gap-y-2 py-4">
      <div className="bg-background text-foreground col-start-1 col-span-2 ml-3 max-w-xl break-words rounded-3xl px-5 py-2.5">
        <MessagePrimitive.Content components={{ Text: MarkdownText }} />
      </div>
      <AssistantActionBar />
      <BranchPicker />
      <MessageError />
    </MessagePrimitive.Root>
  );
};

const MessageError: FC = () => {
  return (
    <ErrorPrimitive.Root className="col-span-full ml-3 mr-3 mt-2 flex items-center gap-2">
      <ErrorPrimitive.Message className="text-destructive text-sm" />
    </ErrorPrimitive.Root>
  );
};

const AssistantActionBar: FC = () => {
  return (
    <ActionBarPrimitive.Root
      hideWhenRunning
      autohide="not-last"
      className="text-muted-foreground col-span-2 ml-3 mt-1 flex gap-1"
    >
      <ActionBarPrimitive.Copy asChild>
        <TooltipIconButton tooltip="Copy">
          <CopyIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Copy>
      <ActionBarPrimitive.Reload asChild>
        <TooltipIconButton tooltip="Refresh">
          <RefreshCwIcon />
        </TooltipIconButton>
      </ActionBarPrimitive.Reload>
    </ActionBarPrimitive.Root>
  );
};

const BranchPicker: FC<BranchPickerPrimitive.Root.Props> = ({
  className,
  ...rest
}) => {
  return (
    <BranchPickerPrimitive.Root
      hideWhenSingleBranch
      className={cn(
        "text-muted-foreground col-span-2 ml-3 inline-flex items-center text-xs",
        className
      )}
      {...rest}
    >
      <BranchPickerPrimitive.Previous asChild>
        <TooltipIconButton tooltip="Previous">
          <ChevronLeftIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Previous>
      <span className="font-medium">
        <BranchPickerPrimitive.Number /> / <BranchPickerPrimitive.Count />
      </span>
      <BranchPickerPrimitive.Next asChild>
        <TooltipIconButton tooltip="Next">
          <ChevronRightIcon />
        </TooltipIconButton>
      </BranchPickerPrimitive.Next>
    </BranchPickerPrimitive.Root>
  );
};
